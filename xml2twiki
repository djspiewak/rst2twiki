#!/bin/sh
exec scala $0 $@
!#

import scala.xml._

def processParagraph(nodes: NodeSeq): String = {
  var result = ""
  nodes foreach {
    case Text(contents) => {
      result += (contents split "\n" map { _.trim } mkString "\n") + ' '
    }
    
    case <emphasis>{contents}</emphasis> => {
      result += '*' + contents.text + '*'
    }
    
    case <strong>{contents}</strong> => {
      result += "**" + contents.text + "**"
    }
    
    case <literal>{contents}</literal> => {
      result += "=" + contents.text + "="
    }
    
    case node @ <reference>{contents}</reference> => {
      val link = {
        val back = node \ "@refuri"
        
        if (back.length == 0)
          "#" + (node \ "@refid")
        else
          back
      }
      
      result += "[[" + link + "][" + contents + "]]"
    }
    
    case x => error("Unrecognized fragment: " + x)
  }
  
  result + '\n'
}

def processBulletList(level: Int, nodes: NodeSeq): String = {
  val padding = (0 until level).foldLeft("") { (str, _) => str + ' ' }
  
  var result = ""
  nodes foreach {
    case <list_item>{contents @ _*}</list_item> => {
      var prefix = padding + "* "
      var first = true
      
      contents foreach {
        case <paragraph>{contents @ _*}</paragraph> => {
          if (!first)
            result += '\n'
          
          result += prefix
          result += {
            val lines = processParagraph(contents).split('\n')
            lines.mkString("\n" + padding + "  ")
          } + '\n'
          
          prefix = padding + "  "
          first = false
        }
        
        case <bullet_list>{contents @ _*}</bullet_list> => {
          result += processBulletList(level + 4, contents)
        }
        
        case x => error("Unrecognized fragment: " + x)
      }
    }
    
    case x => error("Unrecognized fragment: " + x)
  }
  
  result
}

def processSection(level: Int, nodes: NodeSeq): String = {
  if (level > 6) 
    error("Invalid header level: " + level)
  
  var result = ""
  nodes foreach {
    case <title>{contents}</title> => {
      result += (0 to level).foldLeft("---") { (str, _) => str + '+' }
      result += ' ' + contents.text + "\n\n"
    }
    
    case <paragraph>{contents @ _*}</paragraph> => {
      result += processParagraph(contents) + '\n'
    }
    
    case <bullet_list>{contents @ _*}</bullet_list> => {
      result += processBulletList(0, contents) + '\n'
    }
    
    case <literal_block>{contents}</literal_block> => {
      result += "<verbatim>\n"
      result += contents.text + '\n'
      result += "</verbatim>\n\n"
    }
    
    case <section>{contents @ _*}</section> => {
      result += processSection(level + 1, contents)
    }
    
    case node @ <target></target> => {
      val id = node \ "@refid"
      
      if (id.length > 0)
        result += '#' + id.text + '\n'
    }
    
    case <comment>{_*}</comment> => ()
    
    case x => error("Unrecognized fragment: " + x)
  }
  
  result
}

val input = System.in
val output = System.out

val (<document>{document @ _*}</document>) = XML.load(input)
val result = processSection(0, document)

output.println(result)

// :mode=scala:
